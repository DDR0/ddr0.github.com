:ruby
	# Next Steps: Make entries defined by machine, pulling from the actual files.
	
	# Programatically generated entries for Blog Posts.
	@entries = [
		{
			title: "The Start",
			text: "This is the start of the blog. That's all there is, there is no more.",
			url: "http://localhost/ddr0.github.com/blog.html#1",
		},{
			title: "Diagrams and Charts of Game Mechanics",
			text: "Computer games are, in broad terms, systems of exchange. The player can exchange gold coins for a fancy sword; time and attention for progress; or the player can sit back and watch the game exchange stuff with itself. By graphing interactions between the player and bits of the game, we can see what the focus of the play of the game will be. Lets start off by looking at the simplest example there is, Progress Quest.",
			url: "http://localhost/ddr0.github.com/blog.html#2",
		},{
			title: "Practical CreateJS Examples",
			text: "I have found it difficult to find nice, simple examples of how to lay out an EaselJS program. The documentation and examples generally do a good job of covering the nuts and bolts of the library, but I find that some additional assembly instructions would be helpful. So, in rough order of my progression through the library, here are 5 examples:",
			url: "http://localhost/ddr0.github.com/blog.html#3",
		}
	]
	
	# Manual entries.
	@entries += []

<?xml version="1.0"?>
%rss{"version" => "2.0", "xmlns:atom" => "http://www.w3.org/2005/Atom"}
	%channel
		%title David Roberts' website
		%link https://ddr0.github.com
		%description Updates to DDR's Website. Blog posts and such.
		%atom:link{"href" => "https://ddr0.github.com", "rel" => "self", "type" => "application/rss+xml"}
		- @entries.each do |entry|
			%item
				%title #{entry[:title]}
				%description #{entry[:text]}
				%link #{entry[:url]}
				%guid{"isPermaLink" => "true"} #{entry[:url]}
				%source{"url" => entry[:url]}
				